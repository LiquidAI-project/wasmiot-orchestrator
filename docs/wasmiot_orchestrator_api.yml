openapi: '3.0.3'
info:
  title: Wasm-IoT Orchestrator developer API
  version: '0.0.1'
  description: |
    This API is used to interact with the orchestrator for creating packages,
    deployments and to monitor connected IoT-devices. In addition IoT-devices
    use it to fetch packages and report events.
tags:
  - name: WebAssembly
    description: Executing WebAssembly workloads
  - name: IoT
    description: Deploying workloads to supervisor devices found in network
servers:
  - url: http://{serverIp}:{port}
    variables:
      serverIp:
        default: localhost
        description: IP or name found with mDNS of the machine running supervisor
      port:
        enum:
          - '5000'
          - '80'
        default: '5000'
paths:
  /api/module:
    get:
      description: Return information about all available modules
      responses:
        '200':
          description: An array of module information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Modules"
        '404':
          description: No modules found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      description: Create a new module
      requestBody:
        description: The .wasm binary to base the module on
        required: true
        content:
          multipart/form-data:
            schema:
              properties:
                name:
                  type: string
                wasm:
                  type: string
                  format: binary
      responses:
        '201':
          description: The module was created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Module"
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      description: Delete all modules
      responses:
        '204':
          description: All modules deleted

  /api/module/{module_id}:
    parameters:
      - name: module_id
        in: path
        description: ID of the module
        required: true
        schema:
          type: string
    get:
      description: Return information about a single module
      responses:
        '200':
          description: The module information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Module"
        '404':
          description: No modules found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      description: Generate description to an existing module
      requestBody:
        description: |
          Function type information for generating the description
          and files or 'mounts' to attach to and send along with the module once
          its deployed.
        required: true
        content:
          multipart/form-data:
            schema:
              properties:
                functions:
                  $ref: "#/components/schemas/ModuleDescriptionManifest"
                mounts:
                  type: object
                  items:
                    type: string
                    format: binary
      responses:
        '204':
          description: The module was updated
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"


  /api/module/{module_id}/file:
    get:
      description: Return files associated to a module
      parameters:
        - name: module_id
          in: path
          description: ID of the module
          required: true
          schema:
            type: string
        - name: file_id
          in: query
          description: |
            ID of a specific file. May contain directory separatoring characters
            (i.e. '\' or '/'). Leave empty to get all the associated files
          required: false
          schema:
            type: string
      responses:
        '200':
          description: An mapping of file IDs (the object keys) to binary files
          content:
            multipart/form-data:
              schema:
                type: object
                items:
                  type: string
                  format: binary
        '404':
          description: No modules found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/device:
    get:
      description: Return information about all currently connected devices
      responses:
        '200':
          description: An array of device information
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Device"
        '404':
          description: No devices found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      description: Force device scanning in orchestrator network
      responses:
        '204':
          description: The rescan was started
    delete:
      description: Delete all devices
      responses:
        '204':
          description: All devices deleted

  /api/deployment:
    get:
      description: Return information about all created deployments
      responses:
        '200':
          description: An array of deployment information
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Deployment"
    post:
      description: Create and enact a new deployment
      requestBody:
        description: |
          Function type information and files or 'mounts' to attach to the
          module
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Manifest"
      responses:
        '204':
          description: The deployment was created and enacted
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    Function:
      type: object
      required:
        - name
        - parameterTypes
        - outputType
      properties:
        name:
          type: string
        parameterTypes:
          type: array
          items:
            enum:
              - "integer"
              - "float"
        outputType:
          enum:
            - "integer"
            - "float"
    ModuleDescription:
      description: M2M-communication compatible description of module
        and its functions installable on devices
      type: object
      required:
        - imports
        - exports
      properties:
        imports:
          type: array
          items:
            $ref: "#/components/schemas/Function"
        exports:
          type: array
          items:
            $ref: "#/components/schemas/Function"
    Module:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
        name:
          type: string
        description:
          $ref: "#/components/schemas/ModuleDescription"
        mounts:
          type: object
          items:
            type: string
            format: binary
    Modules:
      type: array
      items:
        $ref: "#/components/schemas/Module"
    Device:
      type: object
      required:
        - id
        - name
        - ip
        - port
        - requirements
        - platform
      properties:
        id:
          type: string
        name:
          type: string
        ip:
          type: string
        port:
          type: integer
        modules:
          description: |
            An array of modules that are currently running on the device.
            This allows others to know what capabilities the device currently has.
          type: array
          items:
            $ref: "#/components/schemas/ModuleDescription"
        platform:
          type: object
          properties:
            memory:
              type: object
              properties:
                bytes:
                  type: integer
            cpu:
              type: object
              properties:
                humanReadableName:
                  type: string
                clockSpeed:
                  type: object
                  properties:
                    Hz:
                      type: integer

    ManifestNode:
      description: Describes a workload that should appear in the deployment
      required:
        - device
        - module
        - function
      properties:
        name:
          type: string
        device:
          description: |
            The ID of the device that the workload should be deployed to.
            If the device is not connected, the deployment will be queued until
            the device is connected(?)
          type: string
        module:
          description: A module ID
          type: string
        function:
          description: |
            The name of the function that should be callable on the node. The
            function must be exported by the module.
          type: string

    Manifest:
      description: Document that a deployment is created based on
      required:
        - name
        - nodes
      properties:
        name:
          type: string
        nodes:
          type: array
          items:
            $ref: "#/components/schemas/ManifestNode"

    DeploymentNode:
      description: Information for a device to set itself up for a workload
      required:
        - modules
        - peers
      properties:
        modules:
          type: array
          items:
            $ref: "#/components/schemas/ModuleDescription"
        peers:
          description: |
            An array of device IDs that are expected to have connection to and from this node
          type: array
          items:
            type: string

    DeploymentSolution:
      description: |
        Solution for how the manifest is to be enacted based on
        manifest and available resources
      required:
        - nodes
      properties:
        nodes:
          type: array
          items:
            $ref: "#/components/schemas/DeploymentNode"

    Deployment:
      description: |
        Contains information about a deployment and its current manifest
      required:
        - id
        - manifest
        - solution
      properties:
        id:
          type: string
        manifest:
          $ref: "#/components/schemas/Manifest"
        solution:
          $ref: "#/components/schemas/DeploymentSolution"

    Error:
      type: object
      required:
        - name
        - message
      properties:
        name:
          type: string
        message:
          type: string

    ModuleDescriptionManifest:
      description: |
        Describes a module at a bit higher level and used in creating a M2M
        compatible description
      type: object
      properties:
        [functionName]:
          $ref: "#/components/schemas/FunctionDescriptionManifest"

    FunctionDescriptionManifest:
      description: |
        Describes a function at a bit higher level and used in creating an
        endpoint description
      type: object
      required:
        - method
      properties:
        method:
          type: string
        parameters:
          type: array
          items:
            $ref: "#/components/schemas/PrimitiveType"
        output:
          $ref: "#/components/schemas/PrimitiveType"
        mounts:
          type: array
          items:
            $ref: "#/components/schemas/MountMetadata"

    PrimitiveType:
      type: string
      enum: [integer, float]

    MountMetadata:
      required:
        - name
        - stage
      properties:
        name:
          type: string
        stage:
          type: string
          enum: [deployment, execution, output]
