version: '3.4'

services:
  orchestrator:
    build:
      context: ./fileserv
      dockerfile: ./Dockerfile
      target: compose
    ports:
      - 3000:3000
    command: nodejs ./server.js
    environment:
      # TODO These should not be these + use a local .env file instead.
      CONFIG_MONGODB_ADMINUSERNAME: root
      CONFIG_MONGODB_ADMINPASSWORD: example
      #CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/

  # TODO Set IOT-device hostnames to end with ".local."? Considered using `domainname`
  # (see https://docs.docker.com/compose/compose-file/#domainname) but had no
  # luck.
  node-device:
    build:
      context: ./client
      dockerfile: ../fileserv/Dockerfile
      target: compose
    ports:
      - 3002:3002
    command: nodejs mdnsDevice.js 3002

  flask-device:
    build:
      context: ./flask-host/
      dockerfile: .devcontainer/Dockerfile
      target: base
      args:
        - DEVICE_NAME='thingi1'
        # TODO Are these needed now that using git submodules (earlier for
        # pulling from gitlab in separate local clone?).
        #- DEPLOY_USER=${DEPLOY_USER}
        #- DEPLOY_TOKEN=${DEPLOY_TOKEN}
    # TODO Create the needed JSON-files initially.
    command: python __main__.py
    ports:
      # 5000 is the default Flask-port that is probably used.
      - 3001:5000
    volumes:
      # Named volumes instead of the mounts like in example(?), in order to
      # prevent confusion when simulating multiple devices(?).
      - ./flask-host/host-app:/flask-host/host_app:bind
      - device1-configs:/flask-host/configs
      - device1-modules:/flask-host/modules
      - device1-output:/flask-host/output

  mongo:
    image: mongo
    restart: unless-stopped
    # TODO Add volumes for db.
    environment:
      # TODO These should not be these + use a local .env file instead.
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example

volumes:
  device1-configs:
  device1-modules:
  device1-output:
