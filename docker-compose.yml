version: '3.4'

services:
  orchestrator:
    build:
      context: ./fileserv
      dockerfile: ./Dockerfile
      target: compose
    ports:
      - 3000:3000
    command: nodejs ./server.js
    environment:
      # TODO These should not be these + use a local .env file instead.
      CONFIG_MONGODB_ADMINUSERNAME: root
      CONFIG_MONGODB_ADMINPASSWORD: example
      #CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/

  # TODO Set IOT-device hostnames to end with ".local."? Considered using `domainname`
  # (see https://docs.docker.com/compose/compose-file/#domainname) but had no
  # luck.
  #
  device-base:
    profiles:
      # NOTE: This makes it so that the service can be extended and the
      # ::OVERRIDE::-marked settings overridden without starting this service
      # during `docker compose up`. The "inherited" services need to be started
      # on their own though...
      - ABSTRACT_BASE_HACK_DO_NOT_USE
      - device
    build:
      context: ./flask-host/
      dockerfile: .devcontainer/Dockerfile
      target: run
      # args:
      #   - DEVICE_NAME='thingi' # ::OVERRIDE::
      #   # TODO Are these needed now that using git submodules (earlier for
      #   # pulling from gitlab in separate local clone?).
      #   #- DEPLOY_USER=${DEPLOY_USER}
      #   #- DEPLOY_TOKEN=${DEPLOY_TOKEN}
    # ports:
    #   # 5000 is the default Flask-port that is probably used.
    #   - 0:5000 # ::OVERRIDE::
    volumes:
      - ./flask-host/host_app:/app/host_app:bind
      # Mount an example device description file to the device. TODO Better
      # would be to just copy it to named volume, but can that be automated
      # elegantly?
      - ./client/files/webcam-laptop.device-description.json:/app/configs/device-description.json
 
  adequate-webcam-laptop:
    extends: device-base
    profiles:
      - device
    build:
      args:
        - DEVICE_NAME='adequate-webcam-laptop'
    ports:
      - 3001:5000
    volumes:
      # Named volumes instead of the mounts in order to prevent files on host
      # and confusion when simulating multiple devices.
      - device1-configs:/app/configs
      - device1-modules:/app/modules
      - device1-output:/app/output
    deploy:
      # Simulate constrained memory. See
      # https://docs.docker.com/config/containers/resource_constraints/
      # https://docs.docker.com/compose/compose-file/compose-file-v3/#resources
      resources:
        limits:
          cpus: '0.5'    
          # Minimum would be 6 megabytes '6M'.
          memory: 8G


  lousy-webcam-laptop:
    extends: device-base
    profiles:
      - device
    build:
      args:
        - DEVICE_NAME='lousy-webcam-laptop'
    ports:
      - 3002:5000
    volumes:
      - device2-configs:/app/configs
      - device2-modules:/app/modules
      - device2-output:/app/output
    deploy:
      resources:
        limits:
          cpus: '0.1'    
          memory: 8G

  mongo:
    image: mongo
    restart: unless-stopped
    # TODO Add volumes for db.
    environment:
      # TODO These should not be these + use a local .env file instead.
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example

volumes:
  device1-configs:
  device1-modules:
  device1-output:

  device2-configs:
  device2-modules:
  device2-output: