version: '3.4'

services:
  orchestrator:
    build:
      context: ./fileserv
      dockerfile: ./Dockerfile
      target: compose
    # TODO Is this necessary as in the local network the port seems to be
    # accessible anyway (e.g., 'curl http://192.168.68.2:3000' succeeds)?
    #ports:
    #  - ${PUBLIC_PORT:-3000}:3000
    networks:
      dockeripvlan:
      default: 
    command: nodejs ./server.js
    environment:
      CONFIG_MONGODB_HOST: ${MONGO_HOST:-mongo}
      CONFIG_MONGODB_PORT: ${MONGO_PORT:-27017}
      CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_ROOT_USERNAME}
      CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_ROOT_PASSWORD}
      CONFIG_PUBLIC_HOST: ${PUBLIC_HOST:-http://orchestrator}
      CONFIG_PUBLIC_PORT: ${PUBLIC_PORT:-3000}

  mongo:
    image: mongo
    restart: unless-stopped
    networks:
      default:
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
    command: mongod --port ${MONGO_PORT:-27017}
    volumes:
      - mongo-config:/DATA/CONFIGDB
      - mongo-db:/DATA/DB

volumes:
  mongo-config:
  mongo-db:

networks:
  default:
    # Network for the orchestrator and MongoDB.
    name: wasmiot-net
  dockeripvlan:
    # Network for connecting orchestrator server and device discovery to
    # outside from Docker.
    name: dockeripvlan
    driver: ipvlan
    driver_opts:
      parent: ${NETWORK_INTERFACE} #eno1 #wlp0s20f3
    ipam:
      config:
        - subnet: "${NETWORK_IP_BASE}.0/24"
        #  TODO Are these two needed?
        #  ip_range: "10.0.0.0/16"
        #  gateway: "10.0.0.1"
